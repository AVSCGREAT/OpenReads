"""
Use FastAPI to put Python asyncio shims on top of calls to https://openlibrary.org.

OpenLibrary API docs: https://openlibrary.org/developers/api

Why?
* Start experimenting with asyncio for our API responses.
* Auto-creates OpenAPI (Swagger) docs including "Try it out" mode.
* Auto-validates both inputs and outputs against json schemas with Pydantic.

mkdir fastapi_hack
cd fastapi_hack
python3.9 -m venv .venv
source .venv/bin/activate
pip install --upgrade pip
pip install "fastapi[all]"
# Copy the contents of this file into `main.py`
uvicorn main:app --reload
# This starts an asyncio webserver that will reload as changes are saved to `main.py`

Try:
* http://127.0.0.1:8000/books/OL7353617M
* Other URLs in the comments below...
* http://127.0.0.1:8000/docs for Swagger docs with Try it out mode.
* http://127.0.0.1:8000/redoc for autogenerated API docs
"""
# from sys import stderr  # print(locals(), file=stderr)
from enum import Enum
from typing import Any, Optional

import requests
from fastapi import FastAPI

app = FastAPI()
url_base = "https://openlibrary.org"


# https://openlibrary.org/api/books?bibkeys=ISBN:0451526538,ISBN:9780486280615
# --> http://127.0.0.1:8000/api/books?bibkeys=ISBN%3A0451526538%2CISBN%3A9780486280615
@app.get("/api/books")
async def read_api_books(
    bibkeys: str, format: str = "json", callback: Any = None, jscmd: str = "viewapi"
):
    format = "json"  # We do not yet support "javascript"  # noqa: F841
    callback = None  # We do not yet support callbacks  # noqa: F841
    return requests.get(f"{url_base}/api/books", params=locals()).json()


class IsbnLccnOclcOlid(str, Enum):
    isdn = "isbn"
    lccn = "lccn"
    oclc = "oclc"
    olid = "olid"


# http://openlibrary.org/api/volumes/brief/isbn/0450002314.json
# --> http://127.0.0.1:8000/api/volumes/brief/isbn/0450002314.json
# TODO: Lot's of work to do!  https://openlibrary.org/dev/docs/api/read
@app.get("/api/volumes/brief/{key_type}/{value}.json")
async def read_api_volumes_brief(
    key_type: IsbnLccnOclcOlid, value: str, callback: Any = None
):
    callback = None  # We do not yet support callbacks  # noqa: F841
    url = f"{url_base}/api/volumes/brief/{key_type}/{value}.json"
    return requests.get(url, params=locals()).json()


# https://openlibrary.org/authors/OL34184A.json
# --> http://127.0.0.1:8000/authors/OL34184A
@app.get("/authors/{olid}.json")
async def read_authors(olid):
    return requests.get(f"{url_base}/authors/{olid}.json").json()


# https://openlibrary.org/authors/OL23919A/works.json
# --> http://127.0.0.1:8000/authors/OL23919A/works.json
#  or http://127.0.0.1:8000/authors/OL23919A/works.json?limit=5
@app.get("/authors/{olid}/works.json")
async def read_authors_works(olid, limit: Optional[int] = None):
    return requests.get(f"{url_base}/authors/{olid}/works.json", params=locals()).json()


# https://openlibrary.org/books/OL7353617M.json
# --> http://127.0.0.1:8000/books/OL7353617M
@app.get("/books/{olid}")
async def read_books(olid):
    return requests.get(f"{url_base}/books/{olid}.json").json()


class IdIsbnLccnOclcOlid(str, Enum):
    id = "id"
    isdn = "isbn"
    lccn = "lccn"
    oclc = "oclc"
    olid = "olid"


class SmallMediumLarge(str, Enum):
    S = "S"
    M = "M"
    L = "L"


# https://covers.openlibrary.org/b/isbn/0450002314-L.jpg
# --> http://127.0.0.1:8000/covers/isbn/0450002314-L.jpg
# NOTE: Covers is a separate server and unique URL scheme!!
# TODO: We will be returning binary content, not a json payload.
@app.get("/covers/{key_type}/{value}-{size}.jpg")
async def read_covers_key_type_value_size_jpeg(
    key_type: IdIsbnLccnOclcOlid, value, size: SmallMediumLarge
) -> bytes:
    # FastAPI + Pydantic must have a better way to do this...
    assert key_type.lower() in ("isbn", "lccn", "oclc", "olid")
    covers_url_base = "https://covers.openlibrary.org/b/"
    return requests.get(f"{covers_url_base}/{key_type}/{value}-{size}.jpg").content


# https://openlibrary.org/isbn/9780140328721
# --> http://127.0.0.1:8000/isbn/9780140328721
@app.get("/isbn/{isbn}")
async def read_isbn(isbn):
    return requests.get(f"{url_base}/isbn/{isbn}.json").json()


# https://openlibrary.org/dev/docs/api/recentchanges
# http://openlibrary.org/recentchanges/2010/10/20/merge-authors.json
# --> http://127.0.0.1:8000/recentchanges/2010/10/20/merge-authors.json
# --> http://127.0.0.1:8000/recentchanges/2010/10/20/merge-authors.json?limit=5
# TODO: YYYY vs. YYYY/MM vs. YYYY/MM/DD with or without KIND or just KIND!!
# TODO: Validation: KIND in (add-cover, add-book, edit-book, merge-authors, update,
#                            revert, new-account, register, lists)
@app.get("/recentchanges/{yyyy}/{mm}/{dd}/{kind}.json")
async def read_recentchanges_yyyy_mm_dd_kind(
    yyyy: int,
    mm: Optional[int] = None,
    dd: Optional[int] = None,
    kind: Optional[str] = None,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    bot: Optional[bool] = None,
):
    url = f"{url_base}/recentchanges/{yyyy}/{mm:02}/{dd:02}/{kind}.json"
    return requests.get(url, params=locals()).json()


# http://openlibrary.org/search.json?q=the+moon+is+a+harsh+mistress
# --> http://127.0.0.1:8000/search.json?q=the+moon+is+a+harsh+mistress
# --> http://127.0.0.1:8000/search.json?q=the+moon+is+a+harsh+mistress&page=2
# TODO: q vs. author vs. title
# TODO: fields
@app.get("/search.json")
async def read_search_json(q, page: Optional[int] = None):
    return requests.get(f"{url_base}/search/authors.json", params=locals()).json()


# https://openlibrary.org/search/authors.json?q=arthur+c+clarke
# --> http://127.0.0.1:8000/search/authors.json?q=arthur+c+clarke
@app.get("/search/authors.json")
async def read_search_authors_json(q):
    return requests.get(f"{url_base}/search/authors.json", params=locals()).json()


# https://openlibrary.org/subjects/python.json
# --> http://127.0.0.1:8000/subjects/python.json
#  or http://127.0.0.1:8000/subjects/python.json?details=True
@app.get("/subjects/{subject}.json")
async def read_subjects(subject, details: bool = False):
    return requests.get(f"{url_base}/subjects/{subject}.json", params=locals()).json()


# https://openlibrary.org/works/OL45883W.json
# --> http://127.0.0.1:8000/works/OL45883W
@app.get("/works/{olid}")
async def read_works(olid):
    return requests.get(f"{url_base}/works/{olid}.json").json()
